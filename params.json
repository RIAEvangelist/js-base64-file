{
  "name": "Js-base64-file",
  "tagline": "node loading, converting and saving of base64 images. Perfect for image data uri use!",
  "body": "# Base64 File loading, converting and saving for node.js\r\n\r\nThis is an ideal way to load or convert local files to base64 either for use as a string or to save on disk.\r\n\r\ninstall ` npm i --save js-base64-file `\r\n\r\n|method|params|description|\r\n|------|------|-----------|\r\n|load  |path,fileName,callback|loads a local file and converts it to base64 if needed. ***note : path should always end with a slash*** |\r\n|loadSync  |path,fileName|same as load, but it returns the base64 string instead of passing it to a callback. This could be slow on really large files. |\r\n|save  |data,path,fileName,callback|saves the data to the specified path and filename|\r\n\r\n|callback|params|description|\r\n|--------|------|-----------|\r\n|load    | err, base64Data|gives you the base64 encoded file data|\r\n|save    | err  |will pass any errors back|\r\n\r\n# Examples\r\n\r\n### loading and converting an image for use in the browser as a data URI\r\n\r\n```javascript\r\n\r\n    const Base64File=require('js-base64-file');\r\n    const image=new Base64File;\r\n\r\n    const file='test.png';\r\n\r\n    //path should alwas end in a /\r\n    const path=`${__dirname}/`;\r\n\r\n    //this will load and convert if needed\r\n    const data=image.loadSync(path,file);\r\n    console.log('you could send this image via ws or http to the browser now : \\n',data);\r\n\r\n```\r\n\r\n### saving the above converted image for later use.\r\n\r\n```javascript\r\n\r\n    image.save(data,path,`copy-b64-${file}`);\r\n\r\n```\r\n\r\nIt's that simple! And it will work with any file type!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}